{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quick References Over the time I found useful to keep a list of commands the I use the most. This project does not intent to replace the documantation for any library or whatever, instead this is a quick reference to them. This pages have a huge inspiration on calmcode.io site, which has as a motif Code. Simply. Clearly. Calmly.","title":"Index"},{"location":"#quick-references","text":"Over the time I found useful to keep a list of commands the I use the most. This project does not intent to replace the documantation for any library or whatever, instead this is a quick reference to them. This pages have a huge inspiration on calmcode.io site, which has as a motif Code. Simply. Clearly. Calmly.","title":"Quick References"},{"location":"git-version/","text":"Git Commands Git \u00e9 uma conhecida ferramenta para versionamento de c\u00f3digo. A documenta\u00e7\u00e3o oficial pode ser encontrada em: Git - Reference Introdu\u00e7\u00e3o ... Reposit\u00f3rio O que \u00e9 um reposit\u00f3rio? Reposit\u00f3rio local Criar um reposit\u00f3rio no diret\u00f3rio atual: git init Verificar o estado dos arquivos e diret\u00f3rio no reposit\u00f3rio: git status Adicionando arquivos para \u00e1rea de stage Adicionar todos os arquivos (ou diret\u00f3rios) para a \u00e1rea de stage: git add . Adicionar arquivo espec\u00edfico para a \u00e1rea de stage: git add meu-arquivo.py Adicionar um arquivo que est\u00e1 listado no .gitignore (por que eu iria querer fazer isso?) git add -f meu-arquivo-ignorado.py Commitando mudan\u00e7as Commit nas \u00e1reas de stage (considerando que ela n\u00e3o est\u00e1 fazia) git commit -m \"Mensagem do commit\" Comitar um arquivo ou v\u00e1rios (quando se utiliza essa op\u00e7\u00e3o?) git meu-arquivo.txt git arquivo1.txt arquivo2.txt Importante: quando uma mensagem n\u00e3o \u00e9 informada pelo par\u00e2metro -m o git ir\u00e1 abrir o editor de texto definido nas configura\u00e7\u00f5es. Comitar arquivos que j\u00e1 est\u00e3o sendo monitorados, sem precisar adicionar na \u00e1rea de staged git commit -a -m \"message\" Renomeando arquivos Renomear um arquivo ou diret\u00f3rio pelo git (pode ter as suas vantagens) git mv <origem> <destino> Removendo arquivos Remover um arquivo: git rm pagina-web.html Remover um diret\u00f3rio: git rm -f diretorio Desfazendo a\u00e7\u00f5es Desfazendo uma altera\u00e7\u00e3o local quando o arquivo n\u00e3o foi adicionada ao \u00e1rea de staged : git checkout meu-arquivo.txt Desfazendo uma altera\u00e7\u00e3o local, com o arquivo adicionado na \u00e1rea de staged : git reset HEAD meu-arquivo.txt Se o resultado abaixo for exibido, o arquivo foi retirado da \u00e1rea de staged mas ainda n\u00e3o foi alterado no diret\u00f3rio Unstaged changes after reset: M meu-arquivo.txt Agora para alterar no diret\u00f3rio, basta executar o comando anterior: git checkout meu-arquivo.txt Reposit\u00f3rio remoto Baixar um clone de um reposit\u00f3rio remoto git clone link-para-o-repositorio-remoto Exibir os links dos reposit\u00f3rios remotos vinculados ao reposit\u00f3rio local: git remote [-v] Op\u00e7\u00f5es: - -v : verbose Vincular reposit\u00f3rio local ao reposit\u00f3rio remoto: git remote add origin git@link-para-repositorio-remoto.git Desvincular reposit\u00f3rios local e remoto: git remote rm origin Exibir informa\u00e7\u00f5es do reposit\u00f3rio remoto: git remote show origin Renomear um reposit\u00f3rio remoto (por padr\u00e3o eles s\u00e3o nomeados como origin ) git remote rename origin new-name Workday: push and pull Realizando o primeiro push para um reposit\u00f3rio remoto git push --set-upstream origin master ou git push -u origin main Enviando mudan\u00e7as para um reposit\u00f3rio remoto: git push Baixando as mudan\u00e7as do reposit\u00f3rio remoto. git pull Buscar as altera\u00e7\u00f5es mas n\u00e3o aplica-las no branch atual (por que eu iria querer fazer isso?) git fetch Branches Listar branches do reposit\u00f3rio local git branch Criar branch git branch bug-123 Criar branch e trocar git checkout -b bug-123 Trocar entre branches locais (que j\u00e1 existem) git checkout bug-123 Apagar branch local git branch -d bug-123 Renomear branch: de dentro git checkout old-branch-name git branch -m new-branch-name Renomear branch: de fora git branch -m old-branch-name new-branch-name Branches em reposit\u00f3rios remotos Baixar branch de um reposit\u00f3rio remoto git checkout -b bug-142 origin/bug-142 Criar branch em um reposit\u00f3rio remoto: git push origin bug-143 Criar branch em um reposit\u00f3rio remoto com nome diferente : git push origin localname:remotename Apagar branch em um reposit\u00f3rio remoto: git push origin bug-145 --delete Renomear branch de reposit\u00f3rio remoto: N\u00e3o \u00e9 poss\u00edvel renomear um reposit\u00f3rio remoto diretamente. Por\u00e9m, pode-se substituir o branch no reposi\u00f3rio remoto utilizando a seguinte sequ\u00eancia de comandos: git checkout old-name git branch -m new-name git push origin :old-name (*) git push --set-upstream origin new-name (*) na verdade eu n\u00e3o entendi esse comando: git push origin :old-name Visualizar hist\u00f3rico Exibir hist\u00f3rico git log --oneline -n5 Op\u00e7\u00f5es: - --oneline : exibe uma modifica\u00e7\u00e3o por linha. - -n5 : exibe as n \u00faltimas modifica\u00e7\u00f5es. - --decorate : identifica o \u00faltimo commit do reposit\u00f3rio remoto em rela\u00e7\u00e3o ao reposit\u00f3rio loca. Ou ent\u00e3o: git log --oneline -n5 --decorate Exibe resumo do hist\u00f3rico: git log --stat Exibe: commit ... Author: ... Date: ... Message: ... Files: arquivo.txt | 21 1 files changed, 21 insertions(+), 0 deletions(-) Exibir informa\u00e7\u00f5es resumidas em uma \u00fanica linha: git log --pretty=oneline Exibir informa\u00e7\u00f5es com uma formata\u00e7\u00e3o espec\u00edfica: git log --pretty=format:\"%h - %an, %ar : %s\" Op\u00e7\u00f5es: - %h: Abrevia\u00e7\u00e3o do hash; - %an: Nome do autor; - %ar: Data; - %s: Coment\u00e1rio. Ver outras op\u00e7\u00f5es de formata\u00e7\u00e3o em: Git - Viewing the Commit History Exibir o hist\u00f3rico de um arquivo espec\u00edfico: git log -- caminho-do-arquivo Exibir o hist\u00f3rico de um usu\u00e1rio em espec\u00edfico: git log --author= ... ## Stash Para alternar entre branches, \u00e9 necess\u00e1rio comitar as altera\u00e7\u00f5es do branch atual para permitir a troca. Quando, por alguma raz\u00e3o, n\u00e3o \u00e9 interessante realizar um comite das altera\u00e7\u00f5es atuais, podemos criar um *stash*. Um *stash* \u00e9 como se fosse um branch tempor\u00e1rio que cont\u00e9m apenas as altera\u00e7\u00f5es n\u00e3o comitadas. Os principais comandos dessa funcionalidade s\u00e3o: Criar um *stash*: git stash Listar *stashes*: git stash list Voltar para o \u00faltimo *stash*: git stash apply Voltar para um *stash* especif\u00edcio (ent\u00e3o \u00e9 poss\u00edvel criar v\u00e1rios *stashes* a partir de um *branch*) git stash apply stash@{2} Onde 2 \u00e9 o ind\u00edce do stash desejado. Criar um branch a partir de um stash: git stash branch b-name Apagar um stash: Apagar um stash espec\u00edfico: ## Merge ... ## Rebasing ... ## Reescrevendo o hist\u00f3rico (danger zone) ... ## Criar Tag (ou Releases) Uma *tag* serve para marcar a gera\u00e7\u00e3o de um release (uma vers\u00e3o do *software*) ## Obter ajuda Comando geral: git help Para comandos em especif\u00edco: git help add git help commit git help log ## Configura\u00e7\u00f5es do Git Definir informa\u00e7\u00f5es do usu\u00e1rio git config --global user.name \"Giliard Godoi\" git config --global user.email <...> Definindo o editor padr\u00e3o: git config --global core.editor vim Outros editores poss\u00edveis (?) Definir a ferramenta de merge: git config --global merge.tool vimdiff Definindo arquivos a serem ignorados de forma global (por que eu iria querer fazer isso?) git config --global core.excludesfile ~/.gitignore Listar configura\u00e7\u00f5es: git config --list --- ## Sobre Algumas informa\u00e7\u00f5es importantes que n\u00e3o est\u00e3o diretamente relacionadas ao conte\u00fado. ### Fork Me! Esse arquivo \u00e9 baseado no trabalho de Leonardo Comelli: [Lista de comandos \u00fateis do GIT](https://gist.github.com/leocomelli/2545add34e4fec21ec16) Ao longo dos anos eu realizei umas mudan\u00e7as, fiz os meus pr\u00f3prios forks, mas senti a necessidade de ir mais a fundo e reorganizar as informa\u00e7\u00f5es. Os princ\u00edpios para organizar essas notas s\u00e3o: ### Inserindo uma entrada Para inserir uma nota, utilize o seguinte padr\u00e3o: Texto explicativo git <command>","title":"Getting Started"},{"location":"git-version/#git-commands","text":"Git \u00e9 uma conhecida ferramenta para versionamento de c\u00f3digo. A documenta\u00e7\u00e3o oficial pode ser encontrada em: Git - Reference","title":"Git Commands"},{"location":"git-version/#introducao","text":"...","title":"Introdu\u00e7\u00e3o"},{"location":"git-version/#repositorio","text":"O que \u00e9 um reposit\u00f3rio?","title":"Reposit\u00f3rio"},{"location":"git-version/#repositorio-local","text":"Criar um reposit\u00f3rio no diret\u00f3rio atual: git init Verificar o estado dos arquivos e diret\u00f3rio no reposit\u00f3rio: git status","title":"Reposit\u00f3rio local"},{"location":"git-version/#adicionando-arquivos-para-area-de-stage","text":"Adicionar todos os arquivos (ou diret\u00f3rios) para a \u00e1rea de stage: git add . Adicionar arquivo espec\u00edfico para a \u00e1rea de stage: git add meu-arquivo.py Adicionar um arquivo que est\u00e1 listado no .gitignore (por que eu iria querer fazer isso?) git add -f meu-arquivo-ignorado.py","title":"Adicionando arquivos para \u00e1rea de stage"},{"location":"git-version/#commitando-mudancas","text":"Commit nas \u00e1reas de stage (considerando que ela n\u00e3o est\u00e1 fazia) git commit -m \"Mensagem do commit\" Comitar um arquivo ou v\u00e1rios (quando se utiliza essa op\u00e7\u00e3o?) git meu-arquivo.txt git arquivo1.txt arquivo2.txt Importante: quando uma mensagem n\u00e3o \u00e9 informada pelo par\u00e2metro -m o git ir\u00e1 abrir o editor de texto definido nas configura\u00e7\u00f5es. Comitar arquivos que j\u00e1 est\u00e3o sendo monitorados, sem precisar adicionar na \u00e1rea de staged git commit -a -m \"message\"","title":"Commitando mudan\u00e7as"},{"location":"git-version/#renomeando-arquivos","text":"Renomear um arquivo ou diret\u00f3rio pelo git (pode ter as suas vantagens) git mv <origem> <destino>","title":"Renomeando arquivos"},{"location":"git-version/#removendo-arquivos","text":"Remover um arquivo: git rm pagina-web.html Remover um diret\u00f3rio: git rm -f diretorio","title":"Removendo arquivos"},{"location":"git-version/#desfazendo-acoes","text":"Desfazendo uma altera\u00e7\u00e3o local quando o arquivo n\u00e3o foi adicionada ao \u00e1rea de staged : git checkout meu-arquivo.txt Desfazendo uma altera\u00e7\u00e3o local, com o arquivo adicionado na \u00e1rea de staged : git reset HEAD meu-arquivo.txt Se o resultado abaixo for exibido, o arquivo foi retirado da \u00e1rea de staged mas ainda n\u00e3o foi alterado no diret\u00f3rio Unstaged changes after reset: M meu-arquivo.txt Agora para alterar no diret\u00f3rio, basta executar o comando anterior: git checkout meu-arquivo.txt","title":"Desfazendo a\u00e7\u00f5es"},{"location":"git-version/#repositorio-remoto","text":"Baixar um clone de um reposit\u00f3rio remoto git clone link-para-o-repositorio-remoto Exibir os links dos reposit\u00f3rios remotos vinculados ao reposit\u00f3rio local: git remote [-v] Op\u00e7\u00f5es: - -v : verbose Vincular reposit\u00f3rio local ao reposit\u00f3rio remoto: git remote add origin git@link-para-repositorio-remoto.git Desvincular reposit\u00f3rios local e remoto: git remote rm origin Exibir informa\u00e7\u00f5es do reposit\u00f3rio remoto: git remote show origin Renomear um reposit\u00f3rio remoto (por padr\u00e3o eles s\u00e3o nomeados como origin ) git remote rename origin new-name","title":"Reposit\u00f3rio remoto"},{"location":"git-version/#workday-push-and-pull","text":"Realizando o primeiro push para um reposit\u00f3rio remoto git push --set-upstream origin master ou git push -u origin main Enviando mudan\u00e7as para um reposit\u00f3rio remoto: git push Baixando as mudan\u00e7as do reposit\u00f3rio remoto. git pull Buscar as altera\u00e7\u00f5es mas n\u00e3o aplica-las no branch atual (por que eu iria querer fazer isso?) git fetch","title":"Workday: push and pull"},{"location":"git-version/#branches","text":"Listar branches do reposit\u00f3rio local git branch Criar branch git branch bug-123 Criar branch e trocar git checkout -b bug-123 Trocar entre branches locais (que j\u00e1 existem) git checkout bug-123 Apagar branch local git branch -d bug-123 Renomear branch: de dentro git checkout old-branch-name git branch -m new-branch-name Renomear branch: de fora git branch -m old-branch-name new-branch-name","title":"Branches"},{"location":"git-version/#branches-em-repositorios-remotos","text":"Baixar branch de um reposit\u00f3rio remoto git checkout -b bug-142 origin/bug-142 Criar branch em um reposit\u00f3rio remoto: git push origin bug-143 Criar branch em um reposit\u00f3rio remoto com nome diferente : git push origin localname:remotename Apagar branch em um reposit\u00f3rio remoto: git push origin bug-145 --delete Renomear branch de reposit\u00f3rio remoto: N\u00e3o \u00e9 poss\u00edvel renomear um reposit\u00f3rio remoto diretamente. Por\u00e9m, pode-se substituir o branch no reposi\u00f3rio remoto utilizando a seguinte sequ\u00eancia de comandos: git checkout old-name git branch -m new-name git push origin :old-name (*) git push --set-upstream origin new-name (*) na verdade eu n\u00e3o entendi esse comando: git push origin :old-name","title":"Branches em reposit\u00f3rios remotos"},{"location":"git-version/#visualizar-historico","text":"Exibir hist\u00f3rico git log --oneline -n5 Op\u00e7\u00f5es: - --oneline : exibe uma modifica\u00e7\u00e3o por linha. - -n5 : exibe as n \u00faltimas modifica\u00e7\u00f5es. - --decorate : identifica o \u00faltimo commit do reposit\u00f3rio remoto em rela\u00e7\u00e3o ao reposit\u00f3rio loca. Ou ent\u00e3o: git log --oneline -n5 --decorate Exibe resumo do hist\u00f3rico: git log --stat Exibe: commit ... Author: ... Date: ... Message: ... Files: arquivo.txt | 21 1 files changed, 21 insertions(+), 0 deletions(-) Exibir informa\u00e7\u00f5es resumidas em uma \u00fanica linha: git log --pretty=oneline Exibir informa\u00e7\u00f5es com uma formata\u00e7\u00e3o espec\u00edfica: git log --pretty=format:\"%h - %an, %ar : %s\" Op\u00e7\u00f5es: - %h: Abrevia\u00e7\u00e3o do hash; - %an: Nome do autor; - %ar: Data; - %s: Coment\u00e1rio. Ver outras op\u00e7\u00f5es de formata\u00e7\u00e3o em: Git - Viewing the Commit History Exibir o hist\u00f3rico de um arquivo espec\u00edfico: git log -- caminho-do-arquivo Exibir o hist\u00f3rico de um usu\u00e1rio em espec\u00edfico: git log --author= ... ## Stash Para alternar entre branches, \u00e9 necess\u00e1rio comitar as altera\u00e7\u00f5es do branch atual para permitir a troca. Quando, por alguma raz\u00e3o, n\u00e3o \u00e9 interessante realizar um comite das altera\u00e7\u00f5es atuais, podemos criar um *stash*. Um *stash* \u00e9 como se fosse um branch tempor\u00e1rio que cont\u00e9m apenas as altera\u00e7\u00f5es n\u00e3o comitadas. Os principais comandos dessa funcionalidade s\u00e3o: Criar um *stash*: git stash Listar *stashes*: git stash list Voltar para o \u00faltimo *stash*: git stash apply Voltar para um *stash* especif\u00edcio (ent\u00e3o \u00e9 poss\u00edvel criar v\u00e1rios *stashes* a partir de um *branch*) git stash apply stash@{2} Onde 2 \u00e9 o ind\u00edce do stash desejado. Criar um branch a partir de um stash: git stash branch b-name Apagar um stash: Apagar um stash espec\u00edfico: ## Merge ... ## Rebasing ... ## Reescrevendo o hist\u00f3rico (danger zone) ... ## Criar Tag (ou Releases) Uma *tag* serve para marcar a gera\u00e7\u00e3o de um release (uma vers\u00e3o do *software*) ## Obter ajuda Comando geral: git help Para comandos em especif\u00edco: git help add git help commit git help log ## Configura\u00e7\u00f5es do Git Definir informa\u00e7\u00f5es do usu\u00e1rio git config --global user.name \"Giliard Godoi\" git config --global user.email <...> Definindo o editor padr\u00e3o: git config --global core.editor vim Outros editores poss\u00edveis (?) Definir a ferramenta de merge: git config --global merge.tool vimdiff Definindo arquivos a serem ignorados de forma global (por que eu iria querer fazer isso?) git config --global core.excludesfile ~/.gitignore Listar configura\u00e7\u00f5es: git config --list --- ## Sobre Algumas informa\u00e7\u00f5es importantes que n\u00e3o est\u00e3o diretamente relacionadas ao conte\u00fado. ### Fork Me! Esse arquivo \u00e9 baseado no trabalho de Leonardo Comelli: [Lista de comandos \u00fateis do GIT](https://gist.github.com/leocomelli/2545add34e4fec21ec16) Ao longo dos anos eu realizei umas mudan\u00e7as, fiz os meus pr\u00f3prios forks, mas senti a necessidade de ir mais a fundo e reorganizar as informa\u00e7\u00f5es. Os princ\u00edpios para organizar essas notas s\u00e3o: ### Inserindo uma entrada Para inserir uma nota, utilize o seguinte padr\u00e3o: Texto explicativo git <command>","title":"Visualizar hist\u00f3rico"},{"location":"linux/","text":"Some Linux commands Don't be afraid of the terminal.","title":"Getting Started"},{"location":"linux/#some-linux-commands","text":"Don't be afraid of the terminal.","title":"Some Linux commands"},{"location":"linux/directories/","text":"How to navigate in the Linux's directory system Listing ls ls . ls /directory Navigating cd /directory/sub_directory cd .. Return to cd ~ Copy, rename and moving Basic of copying. cp [additional_option] source_file target_file Additional options \u2013v verbose: shows the progress of multiple copied files \u2013p preserve: keeps the same attributes, like creation date and file permissions \u2013f force: force the copy by deleting an existing file first \u2013i interactive: prompts for confirmation, highly advised \u2013R recursive: copies all files and subfolders in a directory \u2013u update: copy only if source is newer than destination To copy multiples files: cp my_file.txt my_file_2_.txt my_file_3_.txt /newer_directory Or we can use the wildcard * cp /pictures/*.jpg /archive/pictures To copy files among directories: cp directory_one/my_file.txt directory_two/ cp directory_one/my_file.txt directory_two/rename_file.txt To copy all the subdiretories and files cp -R /directory /newer_directory Another option is to use the command rsync to copy files and diretories. To move (or rename) files without copying: mv my_file.txt renamed_file.txt Removing rm","title":"Directories"},{"location":"linux/directories/#how-to-navigate-in-the-linuxs-directory-system","text":"","title":"How to navigate in the Linux's directory system"},{"location":"linux/directories/#listing","text":"ls ls . ls /directory","title":"Listing"},{"location":"linux/directories/#navigating","text":"cd /directory/sub_directory cd .. Return to cd ~","title":"Navigating"},{"location":"linux/directories/#copy-rename-and-moving","text":"Basic of copying. cp [additional_option] source_file target_file Additional options \u2013v verbose: shows the progress of multiple copied files \u2013p preserve: keeps the same attributes, like creation date and file permissions \u2013f force: force the copy by deleting an existing file first \u2013i interactive: prompts for confirmation, highly advised \u2013R recursive: copies all files and subfolders in a directory \u2013u update: copy only if source is newer than destination To copy multiples files: cp my_file.txt my_file_2_.txt my_file_3_.txt /newer_directory Or we can use the wildcard * cp /pictures/*.jpg /archive/pictures To copy files among directories: cp directory_one/my_file.txt directory_two/ cp directory_one/my_file.txt directory_two/rename_file.txt To copy all the subdiretories and files cp -R /directory /newer_directory Another option is to use the command rsync to copy files and diretories. To move (or rename) files without copying: mv my_file.txt renamed_file.txt","title":"Copy, rename and moving"},{"location":"linux/directories/#removing","text":"rm","title":"Removing"},{"location":"linux/process/","text":"How to handle with process Monitoring with htop htop How to use htop command to monitor system processes in real time Command htop explanation Monitoring with ps Listing processes ps -aux To list the output in Linux's format: ps -e or ps -A To get more information: ps -f or to get more information than before: ps -F To list an user's processes: ps -u username To list an user's attached processes: ps -x To list a group related processes: ps -g groupname To know what are the group names try: less\\etc\\group To list processes related to an executavel: ps -C chrome To list processes related to a terminal: ps -t pts\\0 Show processes' hierarchy: ps -eH To list and sort by cpu or memory usage: ps -eo pid,ppid,cmd,%mem,%cpu --sort=%cpu | head ps -eo pid,ppid,cmd,%mem,%cpu --sort=%mem | head or ps -aux --sort=%cpu | head To list not respondent ones: ps -A | grep -i stress Others useful commands nice It keeps a command running even if the session is disconnected or the user logs out. nohup https://www.computerhope.com/unix/unice.htm https://www.journaldev.com/27875/nohup-command-in-linux It limits the cpu usage cpulimit Finishing processes kill PID","title":"Processes"},{"location":"linux/process/#how-to-handle-with-process","text":"","title":"How to handle with process"},{"location":"linux/process/#monitoring-with-htop","text":"htop How to use htop command to monitor system processes in real time Command htop explanation","title":"Monitoring with htop"},{"location":"linux/process/#monitoring-with-ps","text":"Listing processes ps -aux To list the output in Linux's format: ps -e or ps -A To get more information: ps -f or to get more information than before: ps -F To list an user's processes: ps -u username To list an user's attached processes: ps -x To list a group related processes: ps -g groupname To know what are the group names try: less\\etc\\group To list processes related to an executavel: ps -C chrome To list processes related to a terminal: ps -t pts\\0 Show processes' hierarchy: ps -eH To list and sort by cpu or memory usage: ps -eo pid,ppid,cmd,%mem,%cpu --sort=%cpu | head ps -eo pid,ppid,cmd,%mem,%cpu --sort=%mem | head or ps -aux --sort=%cpu | head To list not respondent ones: ps -A | grep -i stress","title":"Monitoring with ps"},{"location":"linux/process/#others-useful-commands","text":"nice It keeps a command running even if the session is disconnected or the user logs out. nohup https://www.computerhope.com/unix/unice.htm https://www.journaldev.com/27875/nohup-command-in-linux It limits the cpu usage cpulimit","title":"Others useful commands"},{"location":"linux/process/#finishing-processes","text":"kill PID","title":"Finishing processes"},{"location":"linux/ssh/","text":"How to use ssh Connecting ssh -p number user@remote_adress Copy directories and files between local and remote server Use scp command scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2 scp -r local/directory user@server2:home/directory scp -P 9090 ./teste.txt user@server2:directory/teste.txt scp -i $chave user@127.000.000.000:path/to/file.csv filename I got to know all this content from this blog post https://www.golinuxcloud.com/ssh-copy-folder-local-to-remote-server-linux . Acessed in November 3th, 2020.","title":"SSH"},{"location":"linux/ssh/#how-to-use-ssh","text":"","title":"How to use ssh"},{"location":"linux/ssh/#connecting","text":"ssh -p number user@remote_adress","title":"Connecting"},{"location":"linux/ssh/#copy-directories-and-files-between-local-and-remote-server","text":"Use scp command scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2 scp -r local/directory user@server2:home/directory scp -P 9090 ./teste.txt user@server2:directory/teste.txt scp -i $chave user@127.000.000.000:path/to/file.csv filename I got to know all this content from this blog post https://www.golinuxcloud.com/ssh-copy-folder-local-to-remote-server-linux . Acessed in November 3th, 2020.","title":"Copy directories and files between local and remote server"},{"location":"others/","text":"","title":"Others"},{"location":"python/","text":"Python Apenas um guia r\u00e1pido. Documenta\u00e7\u00e3o oficial do python : - The Python Standard Library Indice Beautiful Soup Conda Decorators Functions JSON Jupyter Pickle Pytest Random Module Regular Expressions String Module The Mental Game of Python","title":"Home"},{"location":"python/#python","text":"Apenas um guia r\u00e1pido. Documenta\u00e7\u00e3o oficial do python : - The Python Standard Library","title":"Python"},{"location":"python/#indice","text":"Beautiful Soup Conda Decorators Functions JSON Jupyter Pickle Pytest Random Module Regular Expressions String Module The Mental Game of Python","title":"Indice"},{"location":"python/beautiful-soap/","text":"Beautiful Soap from bs4 import BeautifulSoup Basic usage. from bs4 import BeautifulSoup filename = 'index.html' html_doc = open ( filename , 'r' , encoding = 'utf-8' ) . read () soup = BeautifulSoup ( html_doc , 'html.parser' ) links = soup . find_all ( 'a' , href = True ) lts = soup . find_all ( 'ul' , class_ = 'visualNoMarker' ) Outras codifica\u00e7\u00f5es utf-8 iso-8859-1 latin-1","title":"Beautiful Soap"},{"location":"python/beautiful-soap/#beautiful-soap","text":"from bs4 import BeautifulSoup Basic usage. from bs4 import BeautifulSoup filename = 'index.html' html_doc = open ( filename , 'r' , encoding = 'utf-8' ) . read () soup = BeautifulSoup ( html_doc , 'html.parser' ) links = soup . find_all ( 'a' , href = True ) lts = soup . find_all ( 'ul' , class_ = 'visualNoMarker' )","title":"Beautiful Soap"},{"location":"python/beautiful-soap/#outras-codificacoes","text":"utf-8 iso-8859-1 latin-1","title":"Outras codifica\u00e7\u00f5es"},{"location":"python/conda/","text":"Conda Commands Resumo de comandos Gerenciando ambientes (enviroments) Criar um novo ambiente ( enviroment ) conda create --name myprojecenv conda create --name myprojecenv python=3.8 conda create --name myprojecenv python=3.8 pandas astropy scipy=0.15.0 conda install -n myenv scipy conda env create -f environment.yml conda create --name myclone --clone myenv Criando um ambiente a partir de um arquivo de especifica\u00e7\u00e3o conda install --name myenv --file spec-file.txt Instalar um ou mais pacotes > conda install pandas > > conda install pandas numpy Listando os ambientes dispon\u00edveis conda env list conda info --envs Specification File conda list --explicit Ir\u00e1 produzir um arquivo do tipo > # This file may be used to create an environment using: > # $ conda create --name <env> --file <this file> > # platform: osx-64 > @EXPLICIT > https://repo.anaconda.com/pkgs/free/osx-64/mkl-11.3.3-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/numpy-1.11.1-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/openssl-1.0.2h-1.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/pip-8.1.2-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/python-3.5.2-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/readline-6.2-2.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/setuptools-25.1.6-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/sqlite-3.13.0-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/tk-8.5.18-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/wheel-0.29.0-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/xz-5.2.2-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/zlib-1.2.8-3.tar.bz2 Pode ser salvo em um arquivo conda list --explicit > spec-file.txt conda env export > environment.yml Removendo um ambiente conda remove --name myenv --all Refer\u00eancias Conda Documentation How to manage a enviroment","title":"Conda"},{"location":"python/conda/#conda-commands","text":"Resumo de comandos","title":"Conda Commands"},{"location":"python/conda/#gerenciando-ambientes-enviroments","text":"","title":"Gerenciando ambientes (enviroments)"},{"location":"python/conda/#criar-um-novo-ambiente-enviroment","text":"conda create --name myprojecenv conda create --name myprojecenv python=3.8 conda create --name myprojecenv python=3.8 pandas astropy scipy=0.15.0 conda install -n myenv scipy conda env create -f environment.yml conda create --name myclone --clone myenv","title":"Criar um novo ambiente (enviroment)"},{"location":"python/conda/#criando-um-ambiente-a-partir-de-um-arquivo-de-especificacao","text":"conda install --name myenv --file spec-file.txt","title":"Criando um ambiente a partir de um arquivo de especifica\u00e7\u00e3o"},{"location":"python/conda/#instalar-um-ou-mais-pacotes","text":"> conda install pandas > > conda install pandas numpy","title":"Instalar um ou mais pacotes"},{"location":"python/conda/#listando-os-ambientes-disponiveis","text":"conda env list conda info --envs","title":"Listando os ambientes dispon\u00edveis"},{"location":"python/conda/#specification-file","text":"conda list --explicit Ir\u00e1 produzir um arquivo do tipo > # This file may be used to create an environment using: > # $ conda create --name <env> --file <this file> > # platform: osx-64 > @EXPLICIT > https://repo.anaconda.com/pkgs/free/osx-64/mkl-11.3.3-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/numpy-1.11.1-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/openssl-1.0.2h-1.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/pip-8.1.2-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/python-3.5.2-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/readline-6.2-2.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/setuptools-25.1.6-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/sqlite-3.13.0-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/tk-8.5.18-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/wheel-0.29.0-py35_0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/xz-5.2.2-0.tar.bz2 > https://repo.anaconda.com/pkgs/free/osx-64/zlib-1.2.8-3.tar.bz2 Pode ser salvo em um arquivo conda list --explicit > spec-file.txt conda env export > environment.yml","title":"Specification File"},{"location":"python/conda/#removendo-um-ambiente","text":"conda remove --name myenv --all","title":"Removendo um ambiente"},{"location":"python/conda/#referencias","text":"Conda Documentation How to manage a enviroment","title":"Refer\u00eancias"},{"location":"python/decorator/","text":"Decorators Basicamente um decorator \u00e9 uma fun\u00e7\u00e3o que recebe uma fun\u00e7\u00e3o e retorna uma fun\u00e7\u00e3o decorada, isto \u00e9, com uma funcionalidade adicionada. def decorator ( func ): def wrapper ( * args , ** kwargs ): # do something before result = func ( * args , ** kwargs ) # do somethin after return result return wrapper @decorator def concrete_func (): # do your own stuff return False Essa sintaxe \u00e9 equivalente a: concrete_func = decorator ( concrete_func ) Modelo mental alternativo para entendermos decorators Podemos pensar o s\u00edmbolo @ como um operador que receber\u00e1 a fun\u00e7\u00e3o que ser\u00e1 utilizada para decorar a fun\u00e7\u00e3o que estamos decorando. Quando escrevemos: @decorator def my_function ( * args ): # do something return False Podemos pensar que a fun\u00e7\u00e3o decorator ser\u00e1 atribu\u00edda a @ e o s\u00edmbolo my_function receber\u00e1 o retorno de @(my_function) . Esse modelo \u00e9 \u00fatil quando queremos implementar decorators com par\u00e2metros e os decorators factories . Decorators com par\u00e2metros def decorator ( msg = \"write a message\" , code = 200 ): def decorator ( func ): def wrapper ( * args , ** kwargs ): # do somethin with msg and code parameters return func ( * args , msg = msg , code = code , ** kwargs ) return wrapper Uso @decorator ( msg = \"example\" , code = 200 ) def send_message ( dst , msg = None , code = None , ** kwargs ): # do something return True Decorators que recebem par\u00e2metros opcionais def repeat ( _func = None , * , num_times = 2 ): def decorator_repeat ( func ): @functools . wraps ( func ) def wrapper_repeat ( * args , ** kwargs ): for _ in range ( num_times ): value = func ( * args , ** kwargs ) return value return wrapper_repeat if _func is None : return decorator_repeat else : return decorator_repeat ( _func ) Uso: @repeat def say_whee (): print ( \"Whee!\" ) @repeat ( num_times = 3 ) def greet ( name ): print ( f \"Hello { name } \" ) Classes que implementam decorators Stateful Decorators [Real Python example] import functools def count_calls ( func ): @functools . wraps ( func ) def wrapper_count_calls ( * args , ** kwargs ): wrapper_count_calls . num_calls += 1 ## <<--- grande mudan\u00e7a print ( f \"Call { wrapper_count_calls . num_calls } of { func . __name__ !r} \" ) return func ( * args , ** kwargs ) wrapper_count_calls . num_calls = 0 return wrapper_count_calls @count_calls def say_whee (): print ( \"Whee!\" ) Decorators famosos @classmethod @staticmethod @property @foo . setter @functools . wraps ( func ) Refer\u00eancias Mais detalhes ver ppgi-steiner-gpx-crossover. Decorators for Humans PEP 318 -- Decorators for Functions and Methods . Real Python . Primer on Decorators . Acessado em 15/06/2020. Dispon\u00edvel em https://realpython.com/primer-on-python-decorators Wiki Python Decorators","title":"Decorators"},{"location":"python/decorator/#decorators","text":"Basicamente um decorator \u00e9 uma fun\u00e7\u00e3o que recebe uma fun\u00e7\u00e3o e retorna uma fun\u00e7\u00e3o decorada, isto \u00e9, com uma funcionalidade adicionada. def decorator ( func ): def wrapper ( * args , ** kwargs ): # do something before result = func ( * args , ** kwargs ) # do somethin after return result return wrapper @decorator def concrete_func (): # do your own stuff return False Essa sintaxe \u00e9 equivalente a: concrete_func = decorator ( concrete_func )","title":"Decorators"},{"location":"python/decorator/#modelo-mental-alternativo-para-entendermos-decorators","text":"Podemos pensar o s\u00edmbolo @ como um operador que receber\u00e1 a fun\u00e7\u00e3o que ser\u00e1 utilizada para decorar a fun\u00e7\u00e3o que estamos decorando. Quando escrevemos: @decorator def my_function ( * args ): # do something return False Podemos pensar que a fun\u00e7\u00e3o decorator ser\u00e1 atribu\u00edda a @ e o s\u00edmbolo my_function receber\u00e1 o retorno de @(my_function) . Esse modelo \u00e9 \u00fatil quando queremos implementar decorators com par\u00e2metros e os decorators factories .","title":"Modelo mental alternativo para entendermos decorators"},{"location":"python/decorator/#decorators-com-parametros","text":"def decorator ( msg = \"write a message\" , code = 200 ): def decorator ( func ): def wrapper ( * args , ** kwargs ): # do somethin with msg and code parameters return func ( * args , msg = msg , code = code , ** kwargs ) return wrapper Uso @decorator ( msg = \"example\" , code = 200 ) def send_message ( dst , msg = None , code = None , ** kwargs ): # do something return True","title":"Decorators com par\u00e2metros"},{"location":"python/decorator/#decorators-que-recebem-parametros-opcionais","text":"def repeat ( _func = None , * , num_times = 2 ): def decorator_repeat ( func ): @functools . wraps ( func ) def wrapper_repeat ( * args , ** kwargs ): for _ in range ( num_times ): value = func ( * args , ** kwargs ) return value return wrapper_repeat if _func is None : return decorator_repeat else : return decorator_repeat ( _func ) Uso: @repeat def say_whee (): print ( \"Whee!\" ) @repeat ( num_times = 3 ) def greet ( name ): print ( f \"Hello { name } \" )","title":"Decorators que recebem par\u00e2metros opcionais"},{"location":"python/decorator/#classes-que-implementam-decorators","text":"","title":"Classes que implementam decorators"},{"location":"python/decorator/#stateful-decorators-real-python-example","text":"import functools def count_calls ( func ): @functools . wraps ( func ) def wrapper_count_calls ( * args , ** kwargs ): wrapper_count_calls . num_calls += 1 ## <<--- grande mudan\u00e7a print ( f \"Call { wrapper_count_calls . num_calls } of { func . __name__ !r} \" ) return func ( * args , ** kwargs ) wrapper_count_calls . num_calls = 0 return wrapper_count_calls @count_calls def say_whee (): print ( \"Whee!\" )","title":"Stateful Decorators [Real Python example]"},{"location":"python/decorator/#decorators-famosos","text":"@classmethod @staticmethod @property @foo . setter @functools . wraps ( func )","title":"Decorators famosos"},{"location":"python/decorator/#referencias","text":"Mais detalhes ver ppgi-steiner-gpx-crossover. Decorators for Humans PEP 318 -- Decorators for Functions and Methods . Real Python . Primer on Decorators . Acessado em 15/06/2020. Dispon\u00edvel em https://realpython.com/primer-on-python-decorators Wiki Python Decorators","title":"Refer\u00eancias"},{"location":"python/email/","text":"email Python Module Official documentation: - email python module documentation - email examples See also: - smtplib module. See more here","title":"`email` Python Module"},{"location":"python/email/#email-python-module","text":"Official documentation: - email python module documentation - email examples See also: - smtplib module. See more here","title":"email Python Module"},{"location":"python/formatting/","text":"String formatting","title":"String formatting"},{"location":"python/formatting/#string-formatting","text":"","title":"String formatting"},{"location":"python/functions/","text":"Tips and Tricks about functions in Python(R) def funcao_hello ( nome , ** kwargs ): saudacao = f 'Hello { nome } ' if not len ( kwargs ) : print ( saudacao ) else : complemento = bar ( kwargs . get ( 'idade' ), kwargs ) print ( saudacao , complemento ) def bar ( idade , kwords , ** kwargs ): dos = kwords . get ( 'dos' , None ) if not dos is None : return f ' { idade } anos, nascido em { dos } ' else : return f ' { idade } anos, nascimento desconhecido' if __name__ == \"__main__\" : funcao_hello ( 'Giliard' , idade = 28 , dos = '25 de abril' )","title":"Functions"},{"location":"python/functions/#tips-and-tricks-about-functions-in-pythonr","text":"def funcao_hello ( nome , ** kwargs ): saudacao = f 'Hello { nome } ' if not len ( kwargs ) : print ( saudacao ) else : complemento = bar ( kwargs . get ( 'idade' ), kwargs ) print ( saudacao , complemento ) def bar ( idade , kwords , ** kwargs ): dos = kwords . get ( 'dos' , None ) if not dos is None : return f ' { idade } anos, nascido em { dos } ' else : return f ' { idade } anos, nascimento desconhecido' if __name__ == \"__main__\" : funcao_hello ( 'Giliard' , idade = 28 , dos = '25 de abril' )","title":"Tips and Tricks about functions in Python(R)"},{"location":"python/json/","text":"JSON Fun\u00e7\u00e3o b\u00e1sica: converter dicion\u00e1rios em strings no formato Json e vice e versa. Importa\u00e7\u00e3o e Uso b\u00e1sico import json json . dumps ([ 'foo' , { 'bar' : ( 'baz' , None , 1.0 , 2 )}]) Dump import json json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) Dumps import json json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw ) Load import json json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) Loads import json json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw ) Encoders and Decode Descrever...","title":"Json"},{"location":"python/json/#json","text":"Fun\u00e7\u00e3o b\u00e1sica: converter dicion\u00e1rios em strings no formato Json e vice e versa.","title":"JSON"},{"location":"python/json/#importacao-e-uso-basico","text":"import json json . dumps ([ 'foo' , { 'bar' : ( 'baz' , None , 1.0 , 2 )}])","title":"Importa\u00e7\u00e3o e Uso b\u00e1sico"},{"location":"python/json/#dump","text":"import json json . dump ( obj , fp , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw )","title":"Dump"},{"location":"python/json/#dumps","text":"import json json . dumps ( obj , * , skipkeys = False , ensure_ascii = True , check_circular = True , allow_nan = True , cls = None , indent = None , separators = None , default = None , sort_keys = False , ** kw )","title":"Dumps"},{"location":"python/json/#load","text":"import json json . load ( fp , * , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw )","title":"Load"},{"location":"python/json/#loads","text":"import json json . loads ( s , * , encoding = None , cls = None , object_hook = None , parse_float = None , parse_int = None , parse_constant = None , object_pairs_hook = None , ** kw )","title":"Loads"},{"location":"python/json/#encoders-and-decode","text":"Descrever...","title":"Encoders and Decode"},{"location":"python/jupyter/","text":"Jupyter Jupyter, IPython and IPythonKernel are three differents things. Creating a kernel specification Pretend we have a conda environment called lab (base)$ conda activate lab (lab)$ conda install ipykernel (lab)$ ipython kernel install --user --name=<any_name_for_kernel> (lab)$ conda deactivate Listing kernels jupyter kernelspec list Removing a kernel jupyter kernelspec remove <kernel-name> Register a Kernel for a different enviroment Link for documentation. source activate myenv conda install pip conda install ipykernel python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"","title":"Jupyter"},{"location":"python/jupyter/#jupyter","text":"Jupyter, IPython and IPythonKernel are three differents things.","title":"Jupyter"},{"location":"python/jupyter/#creating-a-kernel-specification","text":"Pretend we have a conda environment called lab (base)$ conda activate lab (lab)$ conda install ipykernel (lab)$ ipython kernel install --user --name=<any_name_for_kernel> (lab)$ conda deactivate","title":"Creating a kernel specification"},{"location":"python/jupyter/#listing-kernels","text":"jupyter kernelspec list","title":"Listing kernels"},{"location":"python/jupyter/#removing-a-kernel","text":"jupyter kernelspec remove <kernel-name>","title":"Removing a kernel"},{"location":"python/jupyter/#register-a-kernel-for-a-different-enviroment","text":"Link for documentation. source activate myenv conda install pip conda install ipykernel python -m ipykernel install --user --name myenv --display-name \"Python (myenv)\"","title":"Register a Kernel for a different enviroment"},{"location":"python/pickle/","text":"Pickle module CUIDADO: Aviso de Seguran\u00e7a O m\u00f3dulo pickle n\u00e3o faz a verifica\u00e7\u00e3o dos dados que est\u00e1 lendo quando a exist\u00eancia de c\u00f3digos ou inicializa\u00e7\u00f5es maliciosas. Por isso somente fa\u00e7a o unpickle de objetos apenas de fontes confi\u00e1veis. M\u00f3dulo para serializa\u00e7\u00e3o de objetos Python: Uso b\u00e1sico (salvar e ler arquivos bin\u00e1rios) Salvar dados. import pickle data = { k : randrange ( 500 ) for k in set ( choices ( range ( 1000 ), k = 100 ))} with open ( \"example.pck\" , \"wb\" ) as file : pickle . dump ( data , file ) Para ler o objeto: import pickle with open ( \"example.pck\" , \"rb\" ) as file : data = pickle . load ( file ) Modos de arquivos Relembrando: - rb : ler um arquivo em formato bin\u00e1rio; - rb+ : permite ler e escrever em um arquivo com formato bin\u00e1rio; - wb : escrever em um arquivo em formato bin\u00e1rio; - wb+ : permite escrever e ler em uma arquivo com formato bin\u00e1rio; - ab : abre um arquivo para apensar (appending) em formato bin\u00e1rio; - ab+ : appending and reading in binary format. Anexando objetos a um mesmo arquivo import pickle file = open ( \"temperature.pickle\" , \"ab\" ) b = { 'celcius' : 93 } pickle . dump ( b , file ) # ... some time before d = { 'farenheight' : 10 } pickle . dump ( d , file ) # ... finishing the program file . close () Para ler v\u00e1rios objetos de um arquivo criado no modo a executamos tantas opera\u00e7\u00f5es de load at\u00e9 surgir um EOFError . import pickle file = open ( \"temperature.pickle\" , \"rb\" ) while True : try : data = pickle . load ( file ) # do something ... except EOFError : break file . close () Refer\u00eancias Documenta\u00e7\u00e3o do m\u00f3dulo pickle","title":"Pickle"},{"location":"python/pickle/#pickle-module","text":"CUIDADO: Aviso de Seguran\u00e7a O m\u00f3dulo pickle n\u00e3o faz a verifica\u00e7\u00e3o dos dados que est\u00e1 lendo quando a exist\u00eancia de c\u00f3digos ou inicializa\u00e7\u00f5es maliciosas. Por isso somente fa\u00e7a o unpickle de objetos apenas de fontes confi\u00e1veis. M\u00f3dulo para serializa\u00e7\u00e3o de objetos Python:","title":"Pickle module"},{"location":"python/pickle/#uso-basico-salvar-e-ler-arquivos-binarios","text":"Salvar dados. import pickle data = { k : randrange ( 500 ) for k in set ( choices ( range ( 1000 ), k = 100 ))} with open ( \"example.pck\" , \"wb\" ) as file : pickle . dump ( data , file ) Para ler o objeto: import pickle with open ( \"example.pck\" , \"rb\" ) as file : data = pickle . load ( file )","title":"Uso b\u00e1sico (salvar e ler arquivos bin\u00e1rios)"},{"location":"python/pickle/#modos-de-arquivos","text":"Relembrando: - rb : ler um arquivo em formato bin\u00e1rio; - rb+ : permite ler e escrever em um arquivo com formato bin\u00e1rio; - wb : escrever em um arquivo em formato bin\u00e1rio; - wb+ : permite escrever e ler em uma arquivo com formato bin\u00e1rio; - ab : abre um arquivo para apensar (appending) em formato bin\u00e1rio; - ab+ : appending and reading in binary format.","title":"Modos de arquivos"},{"location":"python/pickle/#anexando-objetos-a-um-mesmo-arquivo","text":"import pickle file = open ( \"temperature.pickle\" , \"ab\" ) b = { 'celcius' : 93 } pickle . dump ( b , file ) # ... some time before d = { 'farenheight' : 10 } pickle . dump ( d , file ) # ... finishing the program file . close () Para ler v\u00e1rios objetos de um arquivo criado no modo a executamos tantas opera\u00e7\u00f5es de load at\u00e9 surgir um EOFError . import pickle file = open ( \"temperature.pickle\" , \"rb\" ) while True : try : data = pickle . load ( file ) # do something ... except EOFError : break file . close ()","title":"Anexando objetos a um mesmo arquivo"},{"location":"python/pickle/#referencias","text":"Documenta\u00e7\u00e3o do m\u00f3dulo pickle","title":"Refer\u00eancias"},{"location":"python/pytest/","text":"Pytest P\u00e1ginas de refer\u00eancia Documenta\u00e7\u00e3o PyTest Pytest: Uma introdu\u00e7\u00e3o, por Dunossauro Pytest Fixtures, por Dunossauro Muito dessa nota foi baseada na Live do Dunossauro sobre Pytest. Metodologias de teste GWT - GIVEN - WHEN - TEST Conven\u00e7\u00f5es \u00c9 importante observar algumas conven\u00e7\u00f5es: Os arquivos de testes devem ficar em um diret\u00f3rio denominado test ou tests na raiz do projeto. O nome dos arquivos de teste devem iniciar com o prefixo test_ Os nomes das fun\u00e7\u00f5es de teste devem iniicar com o prefixo test_ Comandos b\u00e1sicos pytest . Op\u00e7\u00f5es de linha de comando -v Mostra o nome dos testes executados ( verbose ) -s Mostra as sa\u00eddas do console -k 'key_world' para filtrar os testes a serem executados com base no nome do m\u00e9todo -x sa\u00edda r\u00e1pida ( fail first ) -m mark_name: executa os testes identificados com esse marcador. Ver se\u00e7\u00e3o sobre marca\u00e7\u00e3o. -m 'not mark_name' : filtro invertido, n\u00e3o executa esse grupo de testes -rs: mostra a raz\u00e3o para os testes que foram ignorados ( skipados ) --pdb: console iterativo do debugador ( quando um teste falha ) --fixture: retorna todas as fixtures registradas Tipos de retornos do teste Os poss\u00edves resultados para um teste s\u00e3o: . ( ponto ) Passou F : Falhou x ( min\u00fasculo ) falha esperada X ( mai\u00fasculo ) falha era esperada, mas n\u00e3o falhou s ( skip ) ignorou o teste Marca\u00e7\u00f5es, argumentos e metadados Marca\u00e7\u00f5es serverm para prover informa\u00e7\u00f5es adicionais como: Criando um grupo de m\u00e9todos de teste from pytest import mark @mark . custom_tag_name def test_brincadeira_retorna_queijo_quando_recebe_3 (): ... Parametriza\u00e7\u00e3o from pytest import mark @mark . parametrize ( 'parametro,resultado' , [( 1 , 1 ), ( 2 , 2 ), ( 3 , 'queijo' ), ( 4 , 4 ), ( 5 , 'goiabada' )] ) def test_brincadeira_whatever ( parametro , resultado ): ... Repare que o primeiro argumento s\u00e3o os nomes das vari\u00e1veis recebida pela fun\u00e7\u00e3o. Uma string \u00fanica separada por v\u00edrgula. Pular testes (skip) Simplesmente pular um teste: from pytest import mark @mark . skip def test_brincadeira_retorna_romeu_e_julieta (): ... @mark . skip ( reason = 'bom motivo para pular um teste' ) def test_testando_se_o_teste_eh_ignorado (): ... Pular um teste quando uma condi\u00e7\u00e3o \u00e9 percebida from pytest import mark @mark . skipif ( sys . platform == 'win32' , # condition reason = 'N\u00e3o funciona no windows' , # reason ) def test_faz_chamada_linux (): ... Quando se espera que o teste falhe from pytest import mark @mark . xfail ( sys . platform == 'win32' , reason = 'N\u00e3o \u00e9 para funcionar no windows' , ) def test_esperado_que_falhe (): ... Fixtures Assunto complexo. Tem haver com contexto. Exportando resultados em XML pytest --junitxml report.xml Onde report.xml \u00e9 o nome do arquivo de destino.","title":"Pytest"},{"location":"python/pytest/#pytest","text":"P\u00e1ginas de refer\u00eancia Documenta\u00e7\u00e3o PyTest Pytest: Uma introdu\u00e7\u00e3o, por Dunossauro Pytest Fixtures, por Dunossauro Muito dessa nota foi baseada na Live do Dunossauro sobre Pytest.","title":"Pytest"},{"location":"python/pytest/#metodologias-de-teste","text":"GWT - GIVEN - WHEN - TEST","title":"Metodologias de teste"},{"location":"python/pytest/#convencoes","text":"\u00c9 importante observar algumas conven\u00e7\u00f5es: Os arquivos de testes devem ficar em um diret\u00f3rio denominado test ou tests na raiz do projeto. O nome dos arquivos de teste devem iniciar com o prefixo test_ Os nomes das fun\u00e7\u00f5es de teste devem iniicar com o prefixo test_","title":"Conven\u00e7\u00f5es"},{"location":"python/pytest/#comandos-basicos","text":"pytest .","title":"Comandos b\u00e1sicos"},{"location":"python/pytest/#opcoes-de-linha-de-comando","text":"-v Mostra o nome dos testes executados ( verbose ) -s Mostra as sa\u00eddas do console -k 'key_world' para filtrar os testes a serem executados com base no nome do m\u00e9todo -x sa\u00edda r\u00e1pida ( fail first ) -m mark_name: executa os testes identificados com esse marcador. Ver se\u00e7\u00e3o sobre marca\u00e7\u00e3o. -m 'not mark_name' : filtro invertido, n\u00e3o executa esse grupo de testes -rs: mostra a raz\u00e3o para os testes que foram ignorados ( skipados ) --pdb: console iterativo do debugador ( quando um teste falha ) --fixture: retorna todas as fixtures registradas","title":"Op\u00e7\u00f5es de linha de comando"},{"location":"python/pytest/#tipos-de-retornos-do-teste","text":"Os poss\u00edves resultados para um teste s\u00e3o: . ( ponto ) Passou F : Falhou x ( min\u00fasculo ) falha esperada X ( mai\u00fasculo ) falha era esperada, mas n\u00e3o falhou s ( skip ) ignorou o teste","title":"Tipos de retornos do teste"},{"location":"python/pytest/#marcacoes-argumentos-e-metadados","text":"Marca\u00e7\u00f5es serverm para prover informa\u00e7\u00f5es adicionais como:","title":"Marca\u00e7\u00f5es, argumentos e metadados"},{"location":"python/pytest/#criando-um-grupo-de-metodos-de-teste","text":"from pytest import mark @mark . custom_tag_name def test_brincadeira_retorna_queijo_quando_recebe_3 (): ...","title":"Criando um grupo de m\u00e9todos de teste"},{"location":"python/pytest/#parametrizacao","text":"from pytest import mark @mark . parametrize ( 'parametro,resultado' , [( 1 , 1 ), ( 2 , 2 ), ( 3 , 'queijo' ), ( 4 , 4 ), ( 5 , 'goiabada' )] ) def test_brincadeira_whatever ( parametro , resultado ): ... Repare que o primeiro argumento s\u00e3o os nomes das vari\u00e1veis recebida pela fun\u00e7\u00e3o. Uma string \u00fanica separada por v\u00edrgula.","title":"Parametriza\u00e7\u00e3o"},{"location":"python/pytest/#pular-testes-skip","text":"Simplesmente pular um teste: from pytest import mark @mark . skip def test_brincadeira_retorna_romeu_e_julieta (): ... @mark . skip ( reason = 'bom motivo para pular um teste' ) def test_testando_se_o_teste_eh_ignorado (): ... Pular um teste quando uma condi\u00e7\u00e3o \u00e9 percebida from pytest import mark @mark . skipif ( sys . platform == 'win32' , # condition reason = 'N\u00e3o funciona no windows' , # reason ) def test_faz_chamada_linux (): ...","title":"Pular testes (skip)"},{"location":"python/pytest/#quando-se-espera-que-o-teste-falhe","text":"from pytest import mark @mark . xfail ( sys . platform == 'win32' , reason = 'N\u00e3o \u00e9 para funcionar no windows' , ) def test_esperado_que_falhe (): ...","title":"Quando se espera que o teste falhe"},{"location":"python/pytest/#fixtures","text":"Assunto complexo. Tem haver com contexto.","title":"Fixtures"},{"location":"python/pytest/#exportando-resultados-em-xml","text":"pytest --junitxml report.xml Onde report.xml \u00e9 o nome do arquivo de destino.","title":"Exportando resultados em XML"},{"location":"python/random/","text":"Random Generate Random Data with Python PRNG - pseudorandom number generator TRNG - true random number generator CSPRNG - cryptographically secure PRNG import random random . seed ( 444 ) random . random () # -> [0.0, 1.0) [fechado, aberto) random . randint ( 0 , 100 ) # -> [0, 100] # n\u00famero inteiro entre o intervalo fechado random . randrange ( 1 , 10 ) # -> [1, 10) # [fechado, aberto) random . uniform ( 20 , 30 ) # -> float [x,y] # continuous uniform distribution items = [ 'one' , 'two' , 'three' , 'four' , 'five' ] # choose sample with replacement random . choice ( items ) # duplicates are possible # -----------S------------ random . choices ( items , k = 2 ) # notice the 'S' in choices # without replacement random . sample ( items , 4 ) # randomize a sequence random . shuffle ( items ) Generating a sequence of unique random strings of uniform length import string def unique_strings ( k : int , ntokens : int , pool : str = string . ascii_letters ) -> set : \"\"\"Generate a set of unique string tokens. k: Length of each token ntokens: Number of tokens pool: Iterable of characters to choose from For a highly optimized version: https://stackoverflow.com/a/48421303/7954504 \"\"\" seen = set () # An optimization for tightly-bound loops: # Bind these methods outside of a loop join = '' . join add = seen . add while len ( seen ) < ntokens : token = join ( random . choices ( pool , k = k )) add ( token ) return seen unique_strings ( k = 4 , ntokens = 5 ) unique_strings ( 5 , 4 , string . printable ) PRNGs for Arrays: numpy.random import numpy as np np . random . seed ( 444 ) np . set_printoptions ( precision = 2 ) # Output decimal fmt. # Return samples from the standard normal distribution # each data point is independent of the others np . random . randn ( 5 ) # return a np.array with 5 elements np . random . randn ( 5 , 6 ) # return a np.array with shape (5,6) # `p` is the probability of choosing each element np . random . choice ([ 0 , 1 ], p = [ 0.6 , 0.4 ], size = ( 5 , 4 )) # NumPy's `randint` is [inclusive, exclusive), unlike `random.randint()` np . random . choice ([ True , False ]) # slow way np . random . randint ( 0 , 2 , size = 25 , dtype = np . uint8 ) . view ( bool ) # more faster way # and complicated Generating correlated data Numpy's multivariate_normal function takes a covariance matrix into account. cov ( X , Y ) = corr ( X , Y ) * [ std_x , std_y ] But the calculation is: C = diag ( S ) . P . diag ( S ) where S is a standard deviation matrix and P is correlation matrix def corr2cov ( p : np . ndarray , s : np . ndarray ) -> np . ndarray : \"\"\"Covariance matrix from correlation & standard deviations\"\"\" d = np . diag ( s ) return d @ p @ d O que significa isso @ ? >>> # Start with a correlation matrix and standard deviations. >>> # -0.40 is the correlation between A and B, and the correlation >>> # of a variable with itself is 1.0. >>> corr = np . array ([[ 1. , - 0.40 ], ... [ - 0.40 , 1. ]]) >>> # Standard deviations/means of A and B, respectively >>> stdev = np . array ([ 6. , 1. ]) >>> mean = np . array ([ 2. , 0.5 ]) >>> cov = corr2cov ( corr , stdev ) >>> # `size` is the length of time series for 2d data >>> # (500 months, days, and so on). >>> data = np . random . multivariate_normal ( mean = mean , cov = cov , size = 500 ) >>> data [: 10 ] array ([[ 0.58 , 1.87 ], [ - 7.31 , 0.74 ], [ - 6.24 , 0.33 ], [ - 0.77 , 1.19 ], [ 1.71 , 0.7 ], [ - 3.33 , 1.57 ], [ - 1.13 , 1.23 ], [ - 6.58 , 1.81 ], [ - 0.82 , - 0.34 ], [ - 2.32 , 1.1 ]]) >>> data . shape ( 500 , 2 ) Check the inputs >>> np . corrcoef ( data , rowvar = False ) array ([[ 1. , - 0.39 ], [ - 0.39 , 1. ]]) >>> data . std ( axis = 0 ) array ([ 5.96 , 1.01 ]) >>> data . mean ( axis = 0 ) array ([ 2.13 , 0.49 ]) CSPRNGs in Python os.urandom usede by modules secrete and uuid Unix Operating system use special file at /dev/urandom Windows used C++ function CryptGenRandom() x = os . urandom ( numBytes ) # number of bytes to return x . hex () # give a string representation of hexadeximal number type ( x ), len ( x ) binary = [ f ' { i : 0>8b } ' for i in range ( 256 )] binary [: 16 ] binary = [ bin ( i ) for i in range ( 256 )] bites = bytes ( range ( 256 )) Bites to int SECRETS module import secrets n = 16 # Generate secure tokens secrets . token_bytes ( n ) secrets . token_hex ( n ) secrets . token_urlsafe ( n ) # Secure version of 'random.choice()' secrets . choice ( 'rain' ) Shortly.py # shortly.py from secrets import token_urlsafe DATABASE = {} def shorten ( url : str , nbytes : int = 5 ) -> str : ext = token_urlsafe ( nbytes = nbytes ) if ext in DATABASE : return shorten ( url , nbytes = nbytes ) else : DATABASE . update ({ ext : url }) return f 'short.ly/ { ext } urls = ( 'https://realpython.com/' , 'https://docs.python.org/3/howto/regex.html' ) for u in urls : print ( shorten ( u )) DATABASE # print Universally Unique IDentifier UUID import uuid uuid . uuid4 () tok = uuid . uuid4 () tok . bytes len ( tok . bytes ) len ( tok . bytes ) * 8 tok . hex tok . int uuid1() -> take machine's host ID and current time by default. \"guaranteed uniqueness across time\" uuid3() and uuid5() -> namespace identifier and a name. Use MD5 or SHA-1 SystemRandom # timed.py import random import timeit # The \"default\" random is actually an instance of `random.Random()`. # The CSPRNG version uses `SystemRandom()` and `os.urandom()` in turn. _sysrand = random . SystemRandom () def prng () -> None : random . randint ( 0 , 95 ) def csprng () -> None : _sysrand . randint ( 0 , 95 ) setup = 'import random; from __main__ import prng, csprng' if __name__ == '__main__' : print ( 'Best of 3 trials with 1,000,000 loops per trial:' ) for f in ( 'prng()' , 'csprng()' ): best = min ( timeit . repeat ( f , setup = setup )) print ( ' \\t {:8s} {:0.2f} seconds total time.' . format ( f , best ))","title":"Random"},{"location":"python/random/#random","text":"Generate Random Data with Python PRNG - pseudorandom number generator TRNG - true random number generator CSPRNG - cryptographically secure PRNG import random random . seed ( 444 ) random . random () # -> [0.0, 1.0) [fechado, aberto) random . randint ( 0 , 100 ) # -> [0, 100] # n\u00famero inteiro entre o intervalo fechado random . randrange ( 1 , 10 ) # -> [1, 10) # [fechado, aberto) random . uniform ( 20 , 30 ) # -> float [x,y] # continuous uniform distribution items = [ 'one' , 'two' , 'three' , 'four' , 'five' ] # choose sample with replacement random . choice ( items ) # duplicates are possible # -----------S------------ random . choices ( items , k = 2 ) # notice the 'S' in choices # without replacement random . sample ( items , 4 ) # randomize a sequence random . shuffle ( items )","title":"Random"},{"location":"python/random/#generating-a-sequence-of-unique-random-strings-of-uniform-length","text":"import string def unique_strings ( k : int , ntokens : int , pool : str = string . ascii_letters ) -> set : \"\"\"Generate a set of unique string tokens. k: Length of each token ntokens: Number of tokens pool: Iterable of characters to choose from For a highly optimized version: https://stackoverflow.com/a/48421303/7954504 \"\"\" seen = set () # An optimization for tightly-bound loops: # Bind these methods outside of a loop join = '' . join add = seen . add while len ( seen ) < ntokens : token = join ( random . choices ( pool , k = k )) add ( token ) return seen unique_strings ( k = 4 , ntokens = 5 ) unique_strings ( 5 , 4 , string . printable )","title":"Generating a sequence of unique random strings of uniform length"},{"location":"python/random/#prngs-for-arrays-numpyrandom","text":"import numpy as np np . random . seed ( 444 ) np . set_printoptions ( precision = 2 ) # Output decimal fmt. # Return samples from the standard normal distribution # each data point is independent of the others np . random . randn ( 5 ) # return a np.array with 5 elements np . random . randn ( 5 , 6 ) # return a np.array with shape (5,6) # `p` is the probability of choosing each element np . random . choice ([ 0 , 1 ], p = [ 0.6 , 0.4 ], size = ( 5 , 4 )) # NumPy's `randint` is [inclusive, exclusive), unlike `random.randint()` np . random . choice ([ True , False ]) # slow way np . random . randint ( 0 , 2 , size = 25 , dtype = np . uint8 ) . view ( bool ) # more faster way # and complicated","title":"PRNGs for Arrays: numpy.random"},{"location":"python/random/#generating-correlated-data","text":"Numpy's multivariate_normal function takes a covariance matrix into account. cov ( X , Y ) = corr ( X , Y ) * [ std_x , std_y ] But the calculation is: C = diag ( S ) . P . diag ( S ) where S is a standard deviation matrix and P is correlation matrix def corr2cov ( p : np . ndarray , s : np . ndarray ) -> np . ndarray : \"\"\"Covariance matrix from correlation & standard deviations\"\"\" d = np . diag ( s ) return d @ p @ d O que significa isso @ ? >>> # Start with a correlation matrix and standard deviations. >>> # -0.40 is the correlation between A and B, and the correlation >>> # of a variable with itself is 1.0. >>> corr = np . array ([[ 1. , - 0.40 ], ... [ - 0.40 , 1. ]]) >>> # Standard deviations/means of A and B, respectively >>> stdev = np . array ([ 6. , 1. ]) >>> mean = np . array ([ 2. , 0.5 ]) >>> cov = corr2cov ( corr , stdev ) >>> # `size` is the length of time series for 2d data >>> # (500 months, days, and so on). >>> data = np . random . multivariate_normal ( mean = mean , cov = cov , size = 500 ) >>> data [: 10 ] array ([[ 0.58 , 1.87 ], [ - 7.31 , 0.74 ], [ - 6.24 , 0.33 ], [ - 0.77 , 1.19 ], [ 1.71 , 0.7 ], [ - 3.33 , 1.57 ], [ - 1.13 , 1.23 ], [ - 6.58 , 1.81 ], [ - 0.82 , - 0.34 ], [ - 2.32 , 1.1 ]]) >>> data . shape ( 500 , 2 ) Check the inputs >>> np . corrcoef ( data , rowvar = False ) array ([[ 1. , - 0.39 ], [ - 0.39 , 1. ]]) >>> data . std ( axis = 0 ) array ([ 5.96 , 1.01 ]) >>> data . mean ( axis = 0 ) array ([ 2.13 , 0.49 ])","title":"Generating correlated data"},{"location":"python/random/#csprngs-in-python","text":"os.urandom usede by modules secrete and uuid Unix Operating system use special file at /dev/urandom Windows used C++ function CryptGenRandom() x = os . urandom ( numBytes ) # number of bytes to return x . hex () # give a string representation of hexadeximal number type ( x ), len ( x ) binary = [ f ' { i : 0>8b } ' for i in range ( 256 )] binary [: 16 ] binary = [ bin ( i ) for i in range ( 256 )] bites = bytes ( range ( 256 )) Bites to int","title":"CSPRNGs in Python"},{"location":"python/random/#secrets-module","text":"import secrets n = 16 # Generate secure tokens secrets . token_bytes ( n ) secrets . token_hex ( n ) secrets . token_urlsafe ( n ) # Secure version of 'random.choice()' secrets . choice ( 'rain' )","title":"SECRETS module"},{"location":"python/random/#shortlypy","text":"# shortly.py from secrets import token_urlsafe DATABASE = {} def shorten ( url : str , nbytes : int = 5 ) -> str : ext = token_urlsafe ( nbytes = nbytes ) if ext in DATABASE : return shorten ( url , nbytes = nbytes ) else : DATABASE . update ({ ext : url }) return f 'short.ly/ { ext } urls = ( 'https://realpython.com/' , 'https://docs.python.org/3/howto/regex.html' ) for u in urls : print ( shorten ( u )) DATABASE # print","title":"Shortly.py"},{"location":"python/random/#universally-unique-identifier-uuid","text":"import uuid uuid . uuid4 () tok = uuid . uuid4 () tok . bytes len ( tok . bytes ) len ( tok . bytes ) * 8 tok . hex tok . int uuid1() -> take machine's host ID and current time by default. \"guaranteed uniqueness across time\" uuid3() and uuid5() -> namespace identifier and a name. Use MD5 or SHA-1","title":"Universally Unique IDentifier UUID"},{"location":"python/random/#systemrandom","text":"# timed.py import random import timeit # The \"default\" random is actually an instance of `random.Random()`. # The CSPRNG version uses `SystemRandom()` and `os.urandom()` in turn. _sysrand = random . SystemRandom () def prng () -> None : random . randint ( 0 , 95 ) def csprng () -> None : _sysrand . randint ( 0 , 95 ) setup = 'import random; from __main__ import prng, csprng' if __name__ == '__main__' : print ( 'Best of 3 trials with 1,000,000 loops per trial:' ) for f in ( 'prng()' , 'csprng()' ): best = min ( timeit . repeat ( f , setup = setup )) print ( ' \\t {:8s} {:0.2f} seconds total time.' . format ( f , best ))","title":"SystemRandom"},{"location":"python/regular-expression/","text":"Regular expression import re Documenta\u00e7\u00e3o oficial: - re module documentation See also: - re : How To - Wikipedia: Regular expression - Untitled Pattern Meta caracteres: ''' . ^ $ * + ? { } [ ] \\ | ( ) ''' [ ] (conjunto) define um conjunto de caracteres. Exemplos [abc] [a-c] [0-9]. Metacaracteres dentro de um conjunto s\u00e3o tomados como caracteres normais. Ver: [^ ] ; ( ) (grupo) define um grupo; [^ ] (nega\u00e7\u00e3o) indica nega\u00e7\u00e3o, exce\u00e7\u00e3o ou complemento. Por exemplo, [^5] encontra qualquer caracter exceto 5; \\ (backslash) ou escape. Pode representar conjuntos predefinidos, quando seguido por uma letra; . (ponto) corresponde a qualquer caractere, exceto new line \\n . Corresponde a re.DOTALL ; ^ (inicio) identifica um padr\u00e3o no in\u00edcio da string. $ (final) identifica um padr\u00e3o no final da string. | (ou... ou...) expressa uma alternativa Caracteres especiais \\n : new line \\t : tab space \\r : \\f : \\v : Conjuntos pr\u00e9-definidos \\d equivale a [0-9] \\D equivale a [^0-9] \\s equivale a [\\t\\n\\r\\f\\v] \\S equivale a [^\\t\\n\\r\\f\\v] white space character \\w equivale a [a-zA-Z0-9_] \\W equivale a [^a-zA-Z0-9_] Podem ser inclu\u00eddos dentro de uma classe ou conjunto, por exemplo, [\\s,.] Indicando repeti\u00e7\u00f5es {m, n} min\u00edmo de m e m\u00e1ximo de n repeti\u00e7\u00f5es. * equivale a zero ou mais repeti\u00e7\u00f5es de uma classe. Equivalente a {0,} + equivale a 1 ou mais repeti\u00e7\u00f5es, isto \u00e9, {1,} ? equivale a 0 ou 1 repeti\u00e7\u00f5es: {0,1} {n} exatamente n repeti\u00e7\u00f5es Module-Level Functions Compile uma padr\u00e3o em um objeto que pode ser reusado. re . compile ( * pattern , flags = 0 * ) Flags re . ASCII or re . A re . UNICODE re . IGNORECASE or re . I re . MULTILINE or re . M re . DOTALL or re . S re . VERBOSE or re . X re . LOCALE # re . DEBUG # display debug information \u00c9 poss\u00edvel combinar flags com o operador | re . compile ( pattern , flags = 0 ) Verifica toda a string por uma correspond\u00eancia. Retorna um objeto match para a primeira ocorr\u00eancia. Retorna um objeto match . re . search ( str_pattern , string , flags = 0 ) Verifica o in\u00edcio da string por uma correspond\u00eancia. Retorna um objeto match . re . match ( str_pattern , string , flags = 0 ) Verifica se toda a string corresponde ao padr\u00e3o desejado. Retorna um objeto match . re . fullmatch ( str_pattern , string , flags = 0 ) Divide uma string de acordo com o padr\u00e3o desejado: re . split ( pattern , string , maxsplit = 0 , flags = 0 ) Retorna uma lista de palavras que correspondem ao padr\u00e3o desejado: re . findall ( pattern , string , flags = 0 ) Retornar um objeto iter\u00e1vel com os matches da string: re . finditer ( pattern , string , , flags = 0 ) Substituir um padr\u00e3o por uma outra express\u00e3o em uma string. re . sub ( pattern , repl , string , count = 0 , flags = 0 ) Onde: - pattern pode ser uma string ou um Pattern Object - repl pode ser uma nova string ou uma fun\u00e7\u00e3o - string \u00e9 a string onde ser\u00e1 feita a substitui\u00e7\u00e3o - count \u00e9 o n\u00famero m\u00e1ximo de substitui\u00e7\u00f5es Se repl \u00e9 uma fun\u00e7\u00e3o, ela recebe um match object : >>> def dashrepl ( matchobj ): ... if matchobj . group ( 0 ) == '-' : return ' ' ... else : return '-' >>> re . sub ( '-{1,2}' , dashrepl , 'pro----gram-files' ) 'pro--gram files' >>> re . sub ( r '\\sAND\\s' , # pattern ' & ' , # repl 'Baked Beans And Spam' , # string flags = re . IGNORECASE ) 'Baked Beans & Spam' J\u00e1 re.subn perfoma a mesma opera\u00e7\u00e3o que re.sub por\u00e9m returna uma tupla indicando a nova string e o n\u00famero de substitui\u00e7\u00f5es: (new_string, number_of_subs_made) re . subn ( pattern , repl , string , count = 0 , flags = 0 ) Adiciona \\ ( backslash ) para caracteres especiais: re . escape ( 'https://www.python.org' ) # https://www\\.python\\.org Limpar o cache de express\u00f5es regulares. Por que eu iria fazer isso? re . purge () Padr\u00e3o ( Pattern object ) Compila uma express\u00e3o regular em um objeto que pode ser reusado. pattern = re . compile ( \"d\" ) pattern . search ( 'dog' ) Verifica toda a string e retorna a primeira ocorr\u00eancia. Pattern . search ( string [, pos [, endpos ]]) Onde: - pos indica o indice da posi\u00e7\u00e3o inicial Verifica se o in\u00edcio da (sub)string corresponde ao padr\u00e3o desejado. Pattern . match ( string [, pos [, endpos ]]) Verifica se toda a string corresponde com o padr\u00e3o desejado. Pattern . fullmatch ( string [, pos [, endpos ]]) Divide a string no padr\u00e3o considerado: Pattern . split ( string , maxsplit = 0 ) O resultado \u00e9 algo como: [ 'string-anterior' , 'pattern' , 'string-apos' ] Retorna uma lista de strings que correspondem ao padr\u00e3o. Pattern . findall ( string [, pos [, endpos ]]) Retorna uma iterador com os objetos matches . Pattern . finditer ( string [, pos [, endpos ]]) Retorna uma nova string substituindo as conrrespodencias pelo conte\u00fado de repl Pattern . sub ( repl , string , count = 0 ) Al\u00e9m de retornar uma nova string, tamb\u00e9m retorna a quantidade de vezes que a substitui\u00e7\u00e3o foi realizada. Pattern . subn ( repl , string , count = 0 ) Atributos: Pattern . flags Pattern . groups Pattern . groupindex Indica a string ou padr\u00e3o compilado. Pattern . pattern Scanner object scanner . match () scanner . search () scanner . pattern Correspond\u00eancia ( Match object ) Objeto que indica uma correspond\u00eancia. < re . Match object ; span = ( 5 , 11 ), match = 'RegExr' > Retorna a (sub)string correspondente a um grupo: match . group () Pode existir diversos grupos dentro de uma correspond\u00eancia e esses grupos s\u00e3o identificados por n\u00fameros inteiros. Retorna a posi\u00e7\u00e3o inicial da correspond\u00eancia: match . start () Retorna a posi\u00e7\u00e3o final da correspond\u00eancia: match . end () Retorna uma tupla indicando a posi\u00e7\u00e3o inicial e final de uma correspond\u00eancia: match . span () match . groups () match . groupdict () The backslash plague Leia o artigo The Backslash Plague nesse link . Exemplos de express\u00f5es regulares Outros exemplos podem ser vistos neste notebook em Google Collab.","title":"Regular expressions"},{"location":"python/regular-expression/#regular-expression","text":"import re Documenta\u00e7\u00e3o oficial: - re module documentation See also: - re : How To - Wikipedia: Regular expression - Untitled Pattern","title":"Regular expression"},{"location":"python/regular-expression/#meta-caracteres","text":"''' . ^ $ * + ? { } [ ] \\ | ( ) ''' [ ] (conjunto) define um conjunto de caracteres. Exemplos [abc] [a-c] [0-9]. Metacaracteres dentro de um conjunto s\u00e3o tomados como caracteres normais. Ver: [^ ] ; ( ) (grupo) define um grupo; [^ ] (nega\u00e7\u00e3o) indica nega\u00e7\u00e3o, exce\u00e7\u00e3o ou complemento. Por exemplo, [^5] encontra qualquer caracter exceto 5; \\ (backslash) ou escape. Pode representar conjuntos predefinidos, quando seguido por uma letra; . (ponto) corresponde a qualquer caractere, exceto new line \\n . Corresponde a re.DOTALL ; ^ (inicio) identifica um padr\u00e3o no in\u00edcio da string. $ (final) identifica um padr\u00e3o no final da string. | (ou... ou...) expressa uma alternativa","title":"Meta caracteres:"},{"location":"python/regular-expression/#caracteres-especiais","text":"\\n : new line \\t : tab space \\r : \\f : \\v :","title":"Caracteres especiais"},{"location":"python/regular-expression/#conjuntos-pre-definidos","text":"\\d equivale a [0-9] \\D equivale a [^0-9] \\s equivale a [\\t\\n\\r\\f\\v] \\S equivale a [^\\t\\n\\r\\f\\v] white space character \\w equivale a [a-zA-Z0-9_] \\W equivale a [^a-zA-Z0-9_] Podem ser inclu\u00eddos dentro de uma classe ou conjunto, por exemplo, [\\s,.]","title":"Conjuntos pr\u00e9-definidos"},{"location":"python/regular-expression/#indicando-repeticoes","text":"{m, n} min\u00edmo de m e m\u00e1ximo de n repeti\u00e7\u00f5es. * equivale a zero ou mais repeti\u00e7\u00f5es de uma classe. Equivalente a {0,} + equivale a 1 ou mais repeti\u00e7\u00f5es, isto \u00e9, {1,} ? equivale a 0 ou 1 repeti\u00e7\u00f5es: {0,1} {n} exatamente n repeti\u00e7\u00f5es","title":"Indicando repeti\u00e7\u00f5es"},{"location":"python/regular-expression/#module-level-functions","text":"Compile uma padr\u00e3o em um objeto que pode ser reusado. re . compile ( * pattern , flags = 0 * ) Flags re . ASCII or re . A re . UNICODE re . IGNORECASE or re . I re . MULTILINE or re . M re . DOTALL or re . S re . VERBOSE or re . X re . LOCALE # re . DEBUG # display debug information \u00c9 poss\u00edvel combinar flags com o operador | re . compile ( pattern , flags = 0 ) Verifica toda a string por uma correspond\u00eancia. Retorna um objeto match para a primeira ocorr\u00eancia. Retorna um objeto match . re . search ( str_pattern , string , flags = 0 ) Verifica o in\u00edcio da string por uma correspond\u00eancia. Retorna um objeto match . re . match ( str_pattern , string , flags = 0 ) Verifica se toda a string corresponde ao padr\u00e3o desejado. Retorna um objeto match . re . fullmatch ( str_pattern , string , flags = 0 ) Divide uma string de acordo com o padr\u00e3o desejado: re . split ( pattern , string , maxsplit = 0 , flags = 0 ) Retorna uma lista de palavras que correspondem ao padr\u00e3o desejado: re . findall ( pattern , string , flags = 0 ) Retornar um objeto iter\u00e1vel com os matches da string: re . finditer ( pattern , string , , flags = 0 ) Substituir um padr\u00e3o por uma outra express\u00e3o em uma string. re . sub ( pattern , repl , string , count = 0 , flags = 0 ) Onde: - pattern pode ser uma string ou um Pattern Object - repl pode ser uma nova string ou uma fun\u00e7\u00e3o - string \u00e9 a string onde ser\u00e1 feita a substitui\u00e7\u00e3o - count \u00e9 o n\u00famero m\u00e1ximo de substitui\u00e7\u00f5es Se repl \u00e9 uma fun\u00e7\u00e3o, ela recebe um match object : >>> def dashrepl ( matchobj ): ... if matchobj . group ( 0 ) == '-' : return ' ' ... else : return '-' >>> re . sub ( '-{1,2}' , dashrepl , 'pro----gram-files' ) 'pro--gram files' >>> re . sub ( r '\\sAND\\s' , # pattern ' & ' , # repl 'Baked Beans And Spam' , # string flags = re . IGNORECASE ) 'Baked Beans & Spam' J\u00e1 re.subn perfoma a mesma opera\u00e7\u00e3o que re.sub por\u00e9m returna uma tupla indicando a nova string e o n\u00famero de substitui\u00e7\u00f5es: (new_string, number_of_subs_made) re . subn ( pattern , repl , string , count = 0 , flags = 0 ) Adiciona \\ ( backslash ) para caracteres especiais: re . escape ( 'https://www.python.org' ) # https://www\\.python\\.org Limpar o cache de express\u00f5es regulares. Por que eu iria fazer isso? re . purge ()","title":"Module-Level Functions"},{"location":"python/regular-expression/#padrao-pattern-object","text":"Compila uma express\u00e3o regular em um objeto que pode ser reusado. pattern = re . compile ( \"d\" ) pattern . search ( 'dog' ) Verifica toda a string e retorna a primeira ocorr\u00eancia. Pattern . search ( string [, pos [, endpos ]]) Onde: - pos indica o indice da posi\u00e7\u00e3o inicial Verifica se o in\u00edcio da (sub)string corresponde ao padr\u00e3o desejado. Pattern . match ( string [, pos [, endpos ]]) Verifica se toda a string corresponde com o padr\u00e3o desejado. Pattern . fullmatch ( string [, pos [, endpos ]]) Divide a string no padr\u00e3o considerado: Pattern . split ( string , maxsplit = 0 ) O resultado \u00e9 algo como: [ 'string-anterior' , 'pattern' , 'string-apos' ] Retorna uma lista de strings que correspondem ao padr\u00e3o. Pattern . findall ( string [, pos [, endpos ]]) Retorna uma iterador com os objetos matches . Pattern . finditer ( string [, pos [, endpos ]]) Retorna uma nova string substituindo as conrrespodencias pelo conte\u00fado de repl Pattern . sub ( repl , string , count = 0 ) Al\u00e9m de retornar uma nova string, tamb\u00e9m retorna a quantidade de vezes que a substitui\u00e7\u00e3o foi realizada. Pattern . subn ( repl , string , count = 0 ) Atributos: Pattern . flags Pattern . groups Pattern . groupindex Indica a string ou padr\u00e3o compilado. Pattern . pattern","title":"Padr\u00e3o (Pattern object)"},{"location":"python/regular-expression/#scanner-object","text":"scanner . match () scanner . search () scanner . pattern","title":"Scanner object"},{"location":"python/regular-expression/#correspondencia-match-object","text":"Objeto que indica uma correspond\u00eancia. < re . Match object ; span = ( 5 , 11 ), match = 'RegExr' > Retorna a (sub)string correspondente a um grupo: match . group () Pode existir diversos grupos dentro de uma correspond\u00eancia e esses grupos s\u00e3o identificados por n\u00fameros inteiros. Retorna a posi\u00e7\u00e3o inicial da correspond\u00eancia: match . start () Retorna a posi\u00e7\u00e3o final da correspond\u00eancia: match . end () Retorna uma tupla indicando a posi\u00e7\u00e3o inicial e final de uma correspond\u00eancia: match . span () match . groups () match . groupdict ()","title":"Correspond\u00eancia (Match object)"},{"location":"python/regular-expression/#the-backslash-plague","text":"Leia o artigo The Backslash Plague nesse link .","title":"The backslash plague"},{"location":"python/regular-expression/#exemplos-de-expressoes-regulares","text":"Outros exemplos podem ser vistos neste notebook em Google Collab.","title":"Exemplos de express\u00f5es regulares"},{"location":"python/string/","text":"Strings Strings s\u00e3o tantos objetos built-in como tamb\u00e9m existe um m\u00f3dulo string . import string Documenta\u00e7\u00e3o oficial: - string module Indexing ans Slice Indexing s = 'hello world' s [ 1 ] Slicing s [ start : end : step ] Para reverter uma string: s [:: - 1 ] Operadores foo + bar foo * 5 'z' in 'abc' 'z' not in 'xyz' Built-in functions Converte um inteiro em um caracter chr ( 90 ) Converte um caracter em um inteiro: chr ( 'Z' ) Tamanho de uma string len ( 'hello world' ) Converte um objeto em uma string correspondente. Ver tamb\u00e9m __str__ : str ( 90 ) # '90' Interpola\u00e7\u00e3o n = 5 , m = 4 prod = n * m f 'The product of { n } and { m } is { prod } ' Case foo . capitalize () foo . lower () foo . upper () foo . swapcase () foo . title () Find and Replace s . count ( < sub > [, < start > [, < end > ]]) s . endswith ( < suffix > [, < start > [, < end > ]]) s . startswith ( < prefix > [, < start > [, < end > ]]) s . find ( < sub > [, < start > [, < end > ]]) s . rfind ( < sub > [, < start > [, < end > ]]) s . index ( < sub > [, < start > [, < end > ]]) s . rindex ( < sub > [, < start > [, < end > ]]) Classification s . isalnum () # is alphanumeric ? s . isalpha () s . isdigit () s . isidentifier () # is a valid python identifier ? s . islower () s . isupper () s . isprintable () s . isspace () # \\n \\t \\r s . istitle () Formatting s . center ( < width > [, < fill > ]) s . expandtabs ( tabsize = 8 ) # replace \\t by white space s . ljust ( < width > [, < fill > ]) s . lstrip ([ < chars > ]) s . rjust ( < width > [, < fill > ]) s . rstrip ([ < chars > ]) s . zfill ( < width > ) # pads a string on the left with zeros s . replace ( < old > , < new > [, < count > ]) s . strip ([ < chars > ]) Converting between string and iterables s . join ( < iterable > ) ', ' . join ([ 'foo' , 'bar' , 'baz' , 'qux' ]) ':' . join ( 'corge' ) # results 'c:o:r:g:e' s . partition ( < separator > ) # divides a string based on a separator. Retorna uma tupla s . split ( sep = ',' , maxsplit =- 1 ) # splits a string into a list of substring s . rsplit ( sep = '.' , maxsplit =- 1 ) s . splitlines ([ keepends ]) # | True or 1 Bytes Object b = b 'foo bar baz' type ( b ) bytes ( < string > , < encoding > ) b = bytes ( 'foo.bar' , 'utf8) bytes ( < size > ) Constantes interessantes do modulo string Alfabeto ASCII string . ascii_letters string . ascii_lowercase # 'abcdefghijklmnopqrstuvwxyz' string . ascii_uppercase # 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' N\u00fameros: string . digits # '0123456789' Pontua\u00e7\u00e3o: string . punctuation # !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ Outras bases num\u00e9ricas: string . hexdigits # '0123456789abcdefABCDEF'. string . octdigits # '01234567' ASCII caracteres considerados espa\u00e7os em branco: string . whitespace # ' \\t\\n\\r\\x0b\\x0c' Formatting from string import Formatter References Real Python: Strings and Characters Data in Python Acessado em <18/07/2018>","title":"Strings"},{"location":"python/string/#strings","text":"Strings s\u00e3o tantos objetos built-in como tamb\u00e9m existe um m\u00f3dulo string . import string Documenta\u00e7\u00e3o oficial: - string module","title":"Strings"},{"location":"python/string/#indexing-ans-slice","text":"Indexing s = 'hello world' s [ 1 ] Slicing s [ start : end : step ] Para reverter uma string: s [:: - 1 ]","title":"Indexing ans Slice"},{"location":"python/string/#operadores","text":"foo + bar foo * 5 'z' in 'abc' 'z' not in 'xyz'","title":"Operadores"},{"location":"python/string/#built-in-functions","text":"Converte um inteiro em um caracter chr ( 90 ) Converte um caracter em um inteiro: chr ( 'Z' ) Tamanho de uma string len ( 'hello world' ) Converte um objeto em uma string correspondente. Ver tamb\u00e9m __str__ : str ( 90 ) # '90'","title":"Built-in functions"},{"location":"python/string/#interpolacao","text":"n = 5 , m = 4 prod = n * m f 'The product of { n } and { m } is { prod } '","title":"Interpola\u00e7\u00e3o"},{"location":"python/string/#case","text":"foo . capitalize () foo . lower () foo . upper () foo . swapcase () foo . title ()","title":"Case"},{"location":"python/string/#find-and-replace","text":"s . count ( < sub > [, < start > [, < end > ]]) s . endswith ( < suffix > [, < start > [, < end > ]]) s . startswith ( < prefix > [, < start > [, < end > ]]) s . find ( < sub > [, < start > [, < end > ]]) s . rfind ( < sub > [, < start > [, < end > ]]) s . index ( < sub > [, < start > [, < end > ]]) s . rindex ( < sub > [, < start > [, < end > ]])","title":"Find and Replace"},{"location":"python/string/#classification","text":"s . isalnum () # is alphanumeric ? s . isalpha () s . isdigit () s . isidentifier () # is a valid python identifier ? s . islower () s . isupper () s . isprintable () s . isspace () # \\n \\t \\r s . istitle ()","title":"Classification"},{"location":"python/string/#formatting","text":"s . center ( < width > [, < fill > ]) s . expandtabs ( tabsize = 8 ) # replace \\t by white space s . ljust ( < width > [, < fill > ]) s . lstrip ([ < chars > ]) s . rjust ( < width > [, < fill > ]) s . rstrip ([ < chars > ]) s . zfill ( < width > ) # pads a string on the left with zeros s . replace ( < old > , < new > [, < count > ]) s . strip ([ < chars > ])","title":"Formatting"},{"location":"python/string/#converting-between-string-and-iterables","text":"s . join ( < iterable > ) ', ' . join ([ 'foo' , 'bar' , 'baz' , 'qux' ]) ':' . join ( 'corge' ) # results 'c:o:r:g:e' s . partition ( < separator > ) # divides a string based on a separator. Retorna uma tupla s . split ( sep = ',' , maxsplit =- 1 ) # splits a string into a list of substring s . rsplit ( sep = '.' , maxsplit =- 1 ) s . splitlines ([ keepends ]) # | True or 1","title":"Converting between string and iterables"},{"location":"python/string/#bytes-object","text":"b = b 'foo bar baz' type ( b ) bytes ( < string > , < encoding > ) b = bytes ( 'foo.bar' , 'utf8) bytes ( < size > )","title":"Bytes Object"},{"location":"python/string/#constantes-interessantes-do-modulo-string","text":"Alfabeto ASCII string . ascii_letters string . ascii_lowercase # 'abcdefghijklmnopqrstuvwxyz' string . ascii_uppercase # 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' N\u00fameros: string . digits # '0123456789' Pontua\u00e7\u00e3o: string . punctuation # !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ Outras bases num\u00e9ricas: string . hexdigits # '0123456789abcdefABCDEF'. string . octdigits # '01234567' ASCII caracteres considerados espa\u00e7os em branco: string . whitespace # ' \\t\\n\\r\\x0b\\x0c'","title":"Constantes interessantes do modulo string"},{"location":"python/string/#formatting_1","text":"from string import Formatter","title":"Formatting"},{"location":"python/string/#references","text":"Real Python: Strings and Characters Data in Python Acessado em <18/07/2018>","title":"References"},{"location":"python/the-mental-game-of-python/","text":"The Mental Game of Python By Raymond Hettinger at PyBay 2019. Strategies to Python Development Strategies: Chunking and Aliasing Solve a related but simpler problem Incremental development Build classes independently and let inheritance discover itself Repeat tasks manually until patterns emerge, the move to a function. Continue to generalize as needed. Consider object orient programming as a graph traversal problem. Separate ETL from analysis. Separate analysis from presentation. Verify type, verify size, view subset of data, and test a subset. Humans should never gaze upon unsorted data. Sets and dicts groupings are primary tools for data analysis. Analysis of the Kruprekar function.","title":"Mental Game"},{"location":"python/the-mental-game-of-python/#the-mental-game-of-python","text":"By Raymond Hettinger at PyBay 2019.","title":"The Mental Game of Python"},{"location":"python/the-mental-game-of-python/#strategies-to-python-development","text":"Strategies: Chunking and Aliasing Solve a related but simpler problem Incremental development Build classes independently and let inheritance discover itself Repeat tasks manually until patterns emerge, the move to a function. Continue to generalize as needed. Consider object orient programming as a graph traversal problem. Separate ETL from analysis. Separate analysis from presentation. Verify type, verify size, view subset of data, and test a subset. Humans should never gaze upon unsorted data. Sets and dicts groupings are primary tools for data analysis. Analysis of the Kruprekar function.","title":"Strategies to Python Development"},{"location":"python/xml/","text":"","title":"Xml"}]}